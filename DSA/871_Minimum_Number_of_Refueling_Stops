class Solution {
public:
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        priority_queue<int>pq;
        int ans=0,i=0,n;
        n=stations.size();
        while(1)
        {
            if(startFuel>=target)
                return ans;
            if(i<n&&startFuel<stations[i][0]&&pq.empty())
                break;
            while(i<n&&startFuel>=stations[i][0])
            {
                pq.push(stations[i][1]);
                i++;
            }
            if(!pq.empty())
            {
                startFuel=startFuel+pq.top();
                pq.pop();
                ans++;
            }
            if(pq.empty()&&i>=n)
                break;
        }
        if(startFuel>=target)
            return ans;
        return -1;
        
    }
};

OOOOOOOOOOOOOORRRRRRRRRRRRRRRRRRRRRRRRRRRR
class Solution {
public:
    int minRefuelStops(int target, int fuel, vector<vector<int>>& stations) {
        int cnt=0;
        int i=0,n=stations.size();
        priority_queue<int> pq;
        while(i<n && fuel<target)
        {
            int temp=i;
            while(i<n && fuel>=stations[i][0]) 
                pq.push(stations[i++][1]);
            while(pq.size() && ((i<n && fuel<stations[i][0]) || (i==n && fuel<target)))
            {
                fuel+=pq.top();
                cnt++;
                pq.pop();
            }
            if(i==temp) 
                return -1;
        }
        if(target>fuel) 
            return -1;
        return cnt;
    }
};
